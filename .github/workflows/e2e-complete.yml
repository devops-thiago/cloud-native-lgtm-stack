name: E2E Tests - Complete Cross-Platform

on:
  push:
    branches: [main, develop]
    paths:
      - 'scripts/*'
      - 'values/*.yaml'
      - '.github/workflows/e2e-complete.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'scripts/*'
      - 'values/*.yaml'
      - '.github/workflows/e2e-complete.yml'
  workflow_dispatch:

jobs:
  test-matrix:
    name: Test ${{ matrix.os }} - ${{ matrix.script-type }} - ${{ matrix.helm-mode }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux tests with shell scripts
          - os: ubuntu-latest
            script-type: shell
            helm-mode: local
            install-script: "./install.sh"
            uninstall-script: "./uninstall.sh"
            shell: bash
          - os: ubuntu-latest
            script-type: shell
            helm-mode: containerized
            install-script: "./install.sh"
            uninstall-script: "./uninstall.sh"
            shell: bash
          # Windows tests with PowerShell scripts
          - os: windows-latest
            script-type: powershell
            helm-mode: local
            install-script: ".\\install.ps1"
            uninstall-script: ".\\uninstall.ps1"
            shell: pwsh
          - os: windows-latest
            script-type: powershell
            helm-mode: containerized
            install-script: ".\\install.ps1"
            uninstall-script: ".\\uninstall.ps1"
            shell: pwsh
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Linux-specific setup
    - name: Install kubectl (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Create kind cluster (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: helm/kind-action@v1
      with:
        cluster_name: lgtm-test-${{ matrix.script-type }}-${{ matrix.helm-mode }}
        kubectl_version: v1.28.0

    # Windows-specific setup
    - name: Install kubectl (Windows)
      if: matrix.os == 'windows-latest'
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install kind (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install kind
        kind version

    - name: Create kind cluster (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        kind create cluster --name lgtm-test-${{ matrix.script-type }}-${{ matrix.helm-mode }} --wait 300s

    # Conditional Helm installation
    - name: Install Helm (for local mode)
      if: matrix.helm-mode == 'local'
      uses: azure/setup-helm@v3
      with:
        version: '3.13.2'

    - name: Remove Helm (for containerized mode on Linux)
      if: matrix.helm-mode == 'containerized' && matrix.os == 'ubuntu-latest'
      run: |
        sudo rm -f /usr/local/bin/helm || true
        which helm && echo "ERROR: Helm still found" && exit 1 || echo "Helm removed successfully"

    - name: Verify cluster and tools
      shell: ${{ matrix.shell }}
      run: |
        kubectl cluster-info
        kubectl get nodes
        docker version

    - name: Verify Helm availability (local mode)
      if: matrix.helm-mode == 'local'
      shell: ${{ matrix.shell }}
      run: helm version

    - name: Verify Helm not available (containerized mode on Windows)
      if: matrix.helm-mode == 'containerized' && matrix.os == 'windows-latest'
      shell: ${{ matrix.shell }}
      run: |
        try { helm version; Write-Host "ERROR: Helm should not be installed"; exit 1 } catch { Write-Host "Helm not found - good for containerized test" }

    - name: Make scripts executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x scripts/*.sh

    - name: Run installation script
      shell: ${{ matrix.shell }}
      working-directory: scripts
      env:
        NAMESPACE: lgtm-test
        RELEASE_PREFIX: test
      run: |
        ${{ matrix.install-script }} ${{ matrix.script-type == 'powershell' && '-Namespace lgtm-test -ReleasePrefix test' || '' }}

    - name: Verify installation
      shell: ${{ matrix.shell }}
      run: |
        # Wait for key pods to be ready
        kubectl wait --for=condition=ready pod -l release=test-minio -n lgtm-test --timeout=300s || echo "Minio pods not ready in time"
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n lgtm-test --timeout=300s || echo "Grafana pods not ready in time"
        
        # List all pods and services
        kubectl get pods -n lgtm-test
        kubectl get services -n lgtm-test

    - name: Verify Helm releases (local mode)
      if: matrix.helm-mode == 'local'
      shell: ${{ matrix.shell }}
      run: helm list -n lgtm-test

    - name: Verify Helm releases (containerized mode - Linux)
      if: matrix.helm-mode == 'containerized' && matrix.os == 'ubuntu-latest'
      shell: ${{ matrix.shell }}
      working-directory: scripts
      run: ./helm-container.sh list -n lgtm-test

    - name: Verify Helm releases (containerized mode - Windows)
      if: matrix.helm-mode == 'containerized' && matrix.os == 'windows-latest'
      shell: ${{ matrix.shell }}
      working-directory: scripts
      run: .\helm-container.ps1 list -n lgtm-test

    - name: Run uninstallation script
      shell: ${{ matrix.shell }}
      working-directory: scripts
      env:
        NAMESPACE: lgtm-test
        RELEASE_PREFIX: test
      run: |
        ${{ matrix.uninstall-script }} ${{ matrix.script-type == 'powershell' && '-Namespace lgtm-test -ReleasePrefix test' || '' }}

    - name: Verify uninstallation (local Helm)
      if: matrix.helm-mode == 'local'
      shell: ${{ matrix.shell }}
      run: |
        # Check that helm releases are removed
        releases=$(helm list -n lgtm-test)
        if echo "$releases" | grep -q "test"; then
          echo "ERROR: Helm releases still exist after uninstall"
          helm list -n lgtm-test
          exit 1
        fi

    - name: Verify uninstallation (containerized Helm - Linux)
      if: matrix.helm-mode == 'containerized' && matrix.os == 'ubuntu-latest'
      shell: ${{ matrix.shell }}
      working-directory: scripts
      run: |
        # Check that helm releases are removed
        if ./helm-container.sh list -n lgtm-test | grep -q "test"; then
          echo "ERROR: Helm releases still exist after uninstall"
          ./helm-container.sh list -n lgtm-test
          exit 1
        fi

    - name: Verify uninstallation (containerized Helm - Windows)
      if: matrix.helm-mode == 'containerized' && matrix.os == 'windows-latest'
      shell: ${{ matrix.shell }}
      working-directory: scripts
      run: |
        $releases = .\helm-container.ps1 list -n lgtm-test
        if ($releases -match "test") {
          Write-Host "ERROR: Helm releases still exist after uninstall"
          .\helm-container.ps1 list -n lgtm-test
          exit 1
        }

    - name: Final verification - check remaining resources
      shell: ${{ matrix.shell }}
      run: |
        # Check that most pods are removed (some may be terminating)
        sleep 10 2>/dev/null || Start-Sleep -Seconds 10
        kubectl get pods -n lgtm-test || echo "Namespace may have been removed"
